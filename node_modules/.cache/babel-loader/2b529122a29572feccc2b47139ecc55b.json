{"ast":null,"code":"var _jsxFileName = \"/Users/danielgibbons/2DComedy/src/ClickableMap.js\";\nimport React from \"react\";\nimport { USCities as cities } from \"./allCities.js\";\nimport { Map as LeafletMap, TileLayer, Marker, Tooltip } from \"react-leaflet\";\nimport { withRouter } from \"react-router\";\nimport danVanIconUrl from \"./images/danvan.png\";\nimport readyMarkerIcon from \"./images/ready-marker-icon.png\";\nimport pendingMarkerIcon from \"./images/pending-marker-icon.png\";\nimport notVisitedMarkerIcon from \"./images/notVisited-marker-icon.png\";\nimport L from \"leaflet\";\n\nfunction ClickableMap(props) {\n  // van coordinates\n  var vanLat = 39.9526;\n  var vanLng = -75.1652; // Need these coordinates. They are the center of the tiled map\n\n  var lat = 38.68717609999999;\n  var lng = -93.33005300000002;\n  var zoom = 4.5;\n  var history = props.history;\n  var danVan = L.icon({\n    iconUrl: danVanIconUrl,\n    iconSize: [45, 35]\n  });\n  var readyCityIcon = L.icon({\n    iconUrl: readyMarkerIcon,\n    iconSize: [25, 41]\n  });\n  var pendingCityIcon = L.icon({\n    iconUrl: pendingMarkerIcon,\n    iconSize: [25, 41]\n  });\n  var notVisitedCityIcon = L.icon({\n    iconUrl: notVisitedMarkerIcon,\n    iconSize: [25, 41]\n  });\n  var cityStateMapping = {\n    ready: readyCityIcon,\n    pending: pendingCityIcon,\n    notVisited: notVisitedCityIcon\n  };\n  return React.createElement(LeafletMap, {\n    center: [lat, lng],\n    zoom: zoom,\n    zoomSnap: 0.5,\n    attributionControl: false,\n    scrollWheelZoom: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"\",\n    url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), cities.map(function (el) {\n    return React.createElement(Marker, {\n      key: el.name,\n      name: el.name,\n      position: [el.lat, el.lng],\n      onClick: function onClick() {\n        return history.push(el.url);\n      },\n      icon: cityStateMapping[el.cityState],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        fontSize: \"14px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, el.name)));\n  }), React.createElement(Marker, {\n    name: \"2DComedy\",\n    position: [vanLat, vanLng],\n    icon: danVan,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      fontSize: \"14px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"2DComedy\"))));\n}\n\nexport default withRouter(ClickableMap);","map":{"version":3,"sources":["/Users/danielgibbons/2DComedy/src/ClickableMap.js"],"names":["React","USCities","cities","Map","LeafletMap","TileLayer","Marker","Tooltip","withRouter","danVanIconUrl","readyMarkerIcon","pendingMarkerIcon","notVisitedMarkerIcon","L","ClickableMap","props","vanLat","vanLng","lat","lng","zoom","history","danVan","icon","iconUrl","iconSize","readyCityIcon","pendingCityIcon","notVisitedCityIcon","cityStateMapping","ready","pending","notVisited","map","el","name","push","url","cityState","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { USCities as cities } from \"./allCities.js\"\nimport { Map as LeafletMap, TileLayer, Marker, Tooltip } from \"react-leaflet\"\nimport { withRouter } from \"react-router\"\nimport danVanIconUrl from \"./images/danvan.png\"\nimport readyMarkerIcon from \"./images/ready-marker-icon.png\"\nimport pendingMarkerIcon from \"./images/pending-marker-icon.png\"\nimport notVisitedMarkerIcon from \"./images/notVisited-marker-icon.png\"\nimport L from \"leaflet\"\n\nfunction ClickableMap(props) {\n  // van coordinates\n  const vanLat = 39.9526\n  const vanLng = -75.1652\n\n  // Need these coordinates. They are the center of the tiled map\n  const lat = 38.68717609999999\n  const lng = -93.33005300000002\n  const zoom = 4.5\n\n  let { history } = props\n  const danVan = L.icon({\n    iconUrl: danVanIconUrl,\n    iconSize: [45, 35],\n  })\n\n  const readyCityIcon = L.icon({\n    iconUrl: readyMarkerIcon,\n    iconSize: [25, 41],\n  })\n\n  const pendingCityIcon = L.icon({\n    iconUrl: pendingMarkerIcon,\n    iconSize: [25, 41],\n  })\n\n  const notVisitedCityIcon = L.icon({\n    iconUrl: notVisitedMarkerIcon,\n    iconSize: [25, 41],\n  })\n\n  const cityStateMapping = {\n    ready: readyCityIcon,\n    pending: pendingCityIcon,\n    notVisited: notVisitedCityIcon,\n  }\n\n  return (\n    <LeafletMap\n      center={[lat, lng]}\n      zoom={zoom}\n      zoomSnap={0.5}\n      attributionControl={false}\n      scrollWheelZoom={false}\n    >\n      <TileLayer attribution=\"\" url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" />\n      {cities.map((el) => {\n        return (\n          <Marker\n            key={el.name}\n            name={el.name}\n            position={[el.lat, el.lng]}\n            onClick={() => history.push(el.url)}\n            icon={cityStateMapping[el.cityState]}\n          >\n            <Tooltip>\n              <div style={{ fontSize: \"14px\" }}>{el.name}</div>\n            </Tooltip>\n          </Marker>\n        )\n      })}\n      <Marker name=\"2DComedy\" position={[vanLat, vanLng]} icon={danVan}>\n        <Tooltip>\n          <div style={{ fontSize: \"14px\" }}>2DComedy</div>\n        </Tooltip>\n      </Marker>\n    </LeafletMap>\n  )\n}\n\nexport default withRouter(ClickableMap)\n"]},"metadata":{},"sourceType":"module"}